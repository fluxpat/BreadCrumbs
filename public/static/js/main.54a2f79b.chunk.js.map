{"version":3,"sources":["components/Auth/Signup.js","services/auth-services.js","components/Auth/Login.js","components/Homepage/Homepage.js","components/UserPage/UserPage.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Signup","props","useState","username","setUsername","password","setPassword","error","setError","className","to","autoComplete","onSubmit","event","preventDefault","axios","post","process","then","response","data","catch","err","signup","setUser","message","history","push","console","log","type","name","value","onChange","e","target","Login","login","Homepage","src","alt","exact","path","render","UserPage","quickPost","setQuickPost","title","setTitle","postStatus","setPostStatus","user","crumbs","_id","text","get","placeholder","id","map","key","created_at","slice","Navbar","scroll","window","scrollTo","top","behavior","onClick","delete","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0WAsDeA,G,MAjDA,SAACC,GAAW,IAAD,EAEUC,mBAAS,IAFnB,mBAEfC,EAFe,KAELC,EAFK,OAGUF,mBAAS,IAHnB,mBAGfG,EAHe,KAGLC,EAHK,OAIIJ,mBAAS,IAJb,mBAIfK,EAJe,KAIRC,EAJQ,KA0BtB,OACI,yBAAKC,UAAU,eACX,sCACA,uDACA,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,KAA1B,uBACA,0BAAMD,UAAU,YAAYE,aAAa,MAAMC,SAzBhC,SAACC,GACpBA,EAAMC,iBCVC,SAACX,EAAUE,GACtB,OAAOU,IAEFC,KAFE,UAEMC,mCAFN,oBAEuD,CACtDd,SAAUA,EACVE,SAAUA,IAEba,MAAK,SAAAC,GACF,OAAOA,EAASC,QAEnBC,OAAM,SAAAC,GACH,OAAOA,EAAIH,SAASC,QDGxBG,CAAOpB,EAAUE,GACZa,MAAK,SAAAC,GACFf,EAAY,IACZE,EAAY,IACZL,EAAMuB,QAAQL,GAEVA,EAASM,QACTjB,EAASW,EAASM,SAElBxB,EAAMyB,QAAQC,KAAK,QAG1BN,OAAM,SAAAd,GAAK,OAAIqB,QAAQC,IAAItB,QASxB,yBAAKE,UAAU,eACX,6CACA,2BAAOqB,KAAK,OAAOC,KAAK,WAAWC,MAAO7B,EAAU8B,SAAU,SAAAC,GAAC,OAAI9B,EAAY8B,EAAEC,OAAOH,WAE5F,yBAAKvB,UAAU,eACX,6CACA,2BAAOqB,KAAK,WAAWC,KAAK,WAAWC,MAAO3B,EAAU4B,SAAU,SAAAC,GAAC,OAAI5B,EAAY4B,EAAEC,OAAOH,WAEhG,2BAAOvB,UAAU,SAASqB,KAAK,SAASE,MAAM,YAEjDzB,EACG,uBAAGE,UAAU,SAASF,GACrB,wCEKF6B,EAjDD,SAACnC,GAAW,IAAD,EAEWC,mBAAS,IAFpB,mBAEdC,EAFc,KAEJC,EAFI,OAGWF,mBAAS,IAHpB,mBAGdG,EAHc,KAGJC,EAHI,OAIKJ,mBAAS,IAJd,mBAIdK,EAJc,KAIPC,EAJO,KA0BrB,OACI,yBAAKC,UAAU,eACX,qCACA,qDACA,kBAAC,IAAD,CAAMC,GAAG,WAAT,wBACA,0BAAMD,UAAU,YAAYE,aAAa,MAAMC,SAzBhC,SAACC,GACpBA,EAAMC,iBDKA,SAACX,EAAUE,GACrB,OAAOU,IAEFC,KAFE,UAEMC,mCAFN,mBAEsD,CACrDd,SAAUA,EACVE,SAAUA,IAEba,MAAK,SAAAC,GACF,OAAOA,EAASC,QAEnBC,OAAM,SAAAC,GACH,OAAOA,EAAIH,SAASC,QCdxBiB,CAAMlC,EAAUE,GACXa,MAAK,SAAAC,GAEFf,EAAY,IACZE,EAAY,IACZL,EAAMuB,QAAQL,GAEVA,EAASM,SACTjB,EAASW,EAASM,YAGzBJ,OAAM,SAAAd,GACHqB,QAAQC,IAAItB,QAWZ,yBAAKE,UAAU,eACX,6CACA,2BAAOqB,KAAK,OAAOC,KAAK,WAAWC,MAAO7B,EAAU8B,SAAU,SAAAC,GAAC,OAAI9B,EAAY8B,EAAEC,OAAOH,WAE5F,yBAAKvB,UAAU,eACX,6CACA,2BAAOqB,KAAK,WAAWC,KAAK,WAAWC,MAAO3B,EAAU4B,SAAU,SAAAC,GAAC,OAAI5B,EAAY4B,EAAEC,OAAOH,WAEhG,2BAAOvB,UAAU,SAASqB,KAAK,SAASE,MAAM,WAEjDzB,EACG,uBAAGE,UAAU,SAASF,GACrB,uCCnBF+B,EAxBE,SAACrC,GAEd,IAAIuB,EAAUvB,EAAMuB,QAIpB,OAFAI,QAAQC,IAAI,qBAAsB5B,GAG9B,yBAAKQ,UAAU,YACX,yBAAKA,UAAU,qBACX,wBAAIA,UAAU,eAAd,eACA,uBAAGA,UAAU,0BAAb,wTAKA,yBAAKA,UAAU,sBAAsB8B,IAAI,eAAeC,IAAI,iBAGhE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAA1C,GAAK,OAAI,kBAAC,EAAD,iBAAWA,EAAX,CAAkBuB,QAASA,QAClE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,UAAUC,OAAQ,SAAA1C,GAAK,OAAI,kBAAC,EAAD,iBAAYA,EAAZ,CAAmBuB,QAASA,UCsCtEoB,G,MA3DE,SAAC3C,GAAW,IAAD,EAEUC,mBAAS,IAFnB,mBAEjB2C,EAFiB,KAENC,EAFM,OAGE5C,mBAAS,IAHX,mBAGjB6C,EAHiB,KAGVC,EAHU,OAIY9C,oBAAS,GAJrB,mBAIjB+C,EAJiB,KAILC,EAJK,KA6BxB,OACI,yBAAKzC,UAAU,aACX,yBAAKA,UAAU,QACX,0BAAMA,UAAU,aAAaE,aAAa,MAAMC,SA1BnC,SAACC,GACtBA,EAAMC,iBACNc,QAAQC,IAAI,kBAAmB5B,EAAMkD,KAAKC,QACtCP,GAEA9B,IAAMC,KAAN,UAAcC,mCAAd,sBAAyDhB,EAAMkD,KAAKE,IAApE,YAAmF,CAAEN,MAAOA,EAAOO,KAAMT,IACzGC,EAAa,IACbE,EAAS,IACTE,GAAc,GAEdnC,IAAMwC,IAAN,UAAatC,mCAAb,uBAAgEC,MAAK,SAAAC,GACjElB,EAAMuB,QAAQL,EAASC,WAI3B8B,GAAc,GAEdnC,IAAMwC,IAAN,UAAatC,mCAAb,uBAAgEC,MAAK,SAAAC,GACjElB,EAAMuB,QAAQL,EAASC,YASnB,yBAAKX,UAAU,qBACX,iDACEwC,EAAuD,iCAAzC,4DAEpB,2BAAOnB,KAAK,OAAOC,KAAK,QAAQC,MAAOe,EAAOS,YAAY,QAAQvB,SAAU,SAAAC,GAAC,OAAIc,EAASd,EAAEC,OAAOH,UACnG,8BAAUF,KAAK,OAAOC,KAAK,OAAOC,MAAOa,EAAWW,YAAY,8BAA8BvB,SAAU,SAAAC,GAAC,OAAIY,EAAaZ,EAAEC,OAAOH,QAAQyB,GAAG,aAC9I,4BAAQ3B,KAAK,UAAb,WAEH7B,EAAMkD,KAAKC,OAAOM,KAAI,SAAA1C,GAEnB,OACI,yBAAKP,UAAU,OAAOkD,IAAK3C,EAAKqC,KAC5B,4BAAKrC,EAAK4C,WAAWC,MAAM,EAAG,KAC9B,4BAAK7C,EAAK+B,OACV,2BAAI/B,EAAKsC,WAKzB,yBAAK7C,UAAU,eChBZqD,G,MAnCA,SAAC7D,GAEZ,IAKI8D,EAAS,WACTC,OAAOC,SAAS,CAAEC,IAAK,EAAGC,SAAU,YAGxC,OACI,yBAAK1D,UAAU,oBACX,yBAAKA,UAAU,eACX,wBAAIA,UAAU,WAAWsC,MAAM,OAAOqB,QAASL,GAA/C,eACA,yBAAKtD,UAAU,eACX,yBAAKA,UAAU,iBAAiB2D,QAASL,GACrC,yBAAKxB,IAAI,aAAaC,IAAI,OAAOO,MAAM,cAActC,UAAU,eAKnE,yBAAKA,UAAU,iBAAiB2D,QApB9B,WJ2BlBrD,IAAMsD,OAAN,UAAgBpD,mCAAhB,qBIzBIhB,EAAMuB,QAAQ,CAAEC,QAAS,8BAmBT,yBAAKc,IAAI,eAAeC,IAAI,SAAS/B,UAAU,cAAcsC,MAAM,YAEvE,yBAAKtC,UAAU,kBACX,yBAAK8B,IAAI,cAAcC,IAAI,WAAW/B,UAAU,YAAYsC,MAAM,mBCJ3EuB,MAnBf,SAAarE,GAAQ,IAAD,EAEMC,mBAASD,EAAMkD,MAFrB,mBAEXA,EAFW,KAEL3B,EAFK,KAKlB,OAFAI,QAAQC,IAAI,qBAAsBsB,GAGhC,yBAAK1C,UAAU,OACZ0C,EAAK1B,QACJ,kBAAC,IAAD,CAAOiB,KAAK,IAAIC,OAAQ,SAAA1C,GAAK,OAAI,kBAAC,EAAD,iBAAcA,EAAd,CAAqBuB,QAASA,QAE7D,yBAAKf,UAAU,YACb,kBAAC,IAAD,CAAOiC,KAAK,IAAIC,OAAQ,SAAA1C,GAAK,OAAI,kBAAC,EAAD,iBAAYA,EAAZ,CAAmBkD,KAAMA,EAAM3B,QAASA,QACzE,kBAAC,IAAD,CAAOkB,KAAK,IAAIC,OAAQ,SAAA1C,GAAK,OAAI,kBAAC,EAAD,iBAAcA,EAAd,CAAqBkD,KAAMA,EAAM3B,QAASA,WCRnE+C,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCTN3D,IAAMwC,IAAN,UAAatC,mCAAb,uBAAgEC,MAAK,SAAAC,GACnE,IAAMgC,EAAOhC,EAASC,KACtBQ,QAAQC,IAAI,2BAA4BV,EAASC,MAEjDuD,IAAShC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAKQ,KAAMA,KAEbyB,SAASC,eAAe,YDkHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9D,MAAK,SAAA+D,GACJA,EAAaC,gBAEd7D,OAAM,SAAAd,GACLqB,QAAQrB,MAAMA,EAAMkB,c","file":"static/js/main.54a2f79b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\"\r\nimport { signup } from \"../../services/auth-services\"\r\nimport './Auth.css'\r\n\r\nconst Signup = (props) => {\r\n\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [error, setError] = useState(\"\")\r\n\r\n    let handleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        // const username = username;\r\n        // const password = password;\r\n\r\n        signup(username, password)\r\n            .then(response => {\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n                props.setUser(response)\r\n\r\n                if (response.message) {\r\n                    setError(response.message)\r\n                } else {\r\n                    props.history.push('/')\r\n                }\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    return (\r\n        <div className=\"Auth easeIn\">\r\n            <h1>Signup</h1>\r\n            <p>Already have an account?</p>\r\n            <Link className=\"link\" to='/'>Click here to login</Link>\r\n            <form className=\"auth-form\" autoComplete=\"off\" onSubmit={handleFormSubmit}>\r\n                <div className=\"credentials\">\r\n                    <label>Username: </label>\r\n                    <input type=\"text\" name=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\r\n                </div>\r\n                <div className=\"credentials\">\r\n                    <label>Password: </label>\r\n                    <input type=\"password\" name=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\r\n                </div>\r\n                <input className=\"button\" type=\"submit\" value=\"Signup\" />\r\n            </form>\r\n            {error ? (\r\n                <p className=\"error\">{error}</p>\r\n            ) : (<></>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup","import axios from \"axios\";\r\n\r\nconst signup = (username, password) => {\r\n    return axios\r\n        // .post(\"/api/auth/signup\", {\r\n        .post(`${process.env.REACT_APP_API_URL}/api/auth/signup`, {\r\n            username: username,\r\n            password: password\r\n        })\r\n        .then(response => {\r\n            return response.data;\r\n        })\r\n        .catch(err => {\r\n            return err.response.data;\r\n        });\r\n};\r\n\r\nconst login = (username, password) => {\r\n    return axios\r\n        // .post(\"/api/auth/login\", {\r\n        .post(`${process.env.REACT_APP_API_URL}/api/auth/login`, {\r\n            username: username,\r\n            password: password\r\n        })\r\n        .then(response => {\r\n            return response.data;\r\n        })\r\n        .catch(err => {\r\n            return err.response.data;\r\n        });\r\n};\r\n\r\nconst logout = () => {\r\n    // axios.delete(\"/api/auth/logout\");\r\n    axios.delete(`${process.env.REACT_APP_API_URL}/api/auth/logout`);\r\n};\r\n\r\nexport { signup, login, logout };\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\"\r\nimport { login } from \"../../services/auth-services\"\r\nimport './Auth.css'\r\n\r\nconst Login = (props) => {\r\n\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [error, setError] = useState(\"\")\r\n\r\n    let handleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        login(username, password)\r\n            .then(response => {\r\n                // console.log(\"This is the login response: \", response)\r\n                setUsername(\"\")\r\n                setPassword(\"\")\r\n                props.setUser(response)\r\n\r\n                if (response.message) {\r\n                    setError(response.message)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"Auth easeIn\">\r\n            <h1>Login</h1>\r\n            <p>Don't have an account?</p>\r\n            <Link to='/signup'>Click here to signup</Link>\r\n            <form className=\"auth-form\" autoComplete=\"off\" onSubmit={handleFormSubmit}>\r\n                <div className=\"credentials\">\r\n                    <label>Username: </label>\r\n                    <input type=\"text\" name=\"username\" value={username} onChange={e => setUsername(e.target.value)} />\r\n                </div>\r\n                <div className=\"credentials\">\r\n                    <label>Password: </label>\r\n                    <input type=\"password\" name=\"password\" value={password} onChange={e => setPassword(e.target.value)} />\r\n                </div>\r\n                <input className=\"button\" type=\"submit\" value=\"Login\" />\r\n            </form>\r\n            {error ? (\r\n                <p className=\"error\">{error}</p>\r\n            ) : (<></>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport { Route } from 'react-router-dom'\r\nimport './Homepage.css'\r\nimport Signup from '../Auth/Signup'\r\nimport Login from '../Auth/Login'\r\n\r\nconst Homepage = (props) => {\r\n\r\n    let setUser = props.setUser\r\n\r\n    console.log(\"HOMEPAGE's props: \", props)\r\n\r\n    return (\r\n        <div className=\"Homepage\">\r\n            <div className='home-intro fadeIn'>\r\n                <h1 className=\"logo easeIn\">BreadCrumbs</h1>\r\n                <p className='home-intro-text easeIn'>\r\n                    Self-reflection is a key part of personal development.\r\n                    Documenting and reflecting on our progress helps us continuously improve with direction and purpose.\r\n                    BreadCrumbs provides a simple system for logging your thoughts and state of mind allowing you to look back and reflect as you change and grow over time.\r\n                </p>\r\n                <img className=\"brioche breadJiggle\" src=\"/Brioche.png\" alt=\"Brioche bun\" />\r\n                {/* <button>See Demo</button> */}\r\n            </div>\r\n            <Route exact path='/' render={props => <Login {...props} setUser={setUser} />} />\r\n            <Route exact path='/signup' render={props => <Signup {...props} setUser={setUser} />} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage;","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './UserPage.css'\r\n\r\nconst UserPage = (props) => {\r\n\r\n    const [quickPost, setQuickPost] = useState(\"\")\r\n    const [title, setTitle] = useState(\"\")\r\n    const [postStatus, setPostStatus] = useState(true)\r\n\r\n    const handleFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log(\"USER's CRUMBS: \", props.user.crumbs)\r\n        if (quickPost) {\r\n            // axios.post(`/api/crumb/${props.user._id}/newpost`, { title: title, text: quickPost })\r\n            axios.post(`${process.env.REACT_APP_API_URL}/api/crumb/${props.user._id}/newpost`, { title: title, text: quickPost })\r\n            setQuickPost('');\r\n            setTitle('');\r\n            setPostStatus(true);\r\n            // axios.get(\"/api/auth/loggedin\").then(response => {\r\n            axios.get(`${process.env.REACT_APP_API_URL}/api/auth/loggedin`).then(response => {\r\n                props.setUser(response.data)\r\n            })\r\n            // props.setUser(props.user)\r\n        } else {\r\n            setPostStatus(false);\r\n            // axios.get(\"/api/auth/loggedin\").then(response => {\r\n            axios.get(`${process.env.REACT_APP_API_URL}/api/auth/loggedin`).then(response => {\r\n                props.setUser(response.data)\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"User-page\">\r\n            <div className=\"feed\">\r\n                <form className=\"quick-post\" autoComplete=\"off\" onSubmit={handleFormSubmit}>\r\n                    <div className=\"quick-post-header\">\r\n                        <h3>Make a quick-post</h3>\r\n                        {!postStatus ? (<h4>Cannot submit an empty post</h4>) : (<h4> </h4>)}\r\n                    </div>\r\n                    <input type=\"text\" name=\"title\" value={title} placeholder=\"Title\" onChange={e => setTitle(e.target.value)} />\r\n                    <textarea type=\"text\" name=\"text\" value={quickPost} placeholder=\"Write your thoughts here...\" onChange={e => setQuickPost(e.target.value)} id=\"txtInput\" />\r\n                    <button type=\"submit\">submit</button>\r\n                </form>\r\n                {props.user.crumbs.map(post => {\r\n\r\n                    return (\r\n                        <div className=\"post\" key={post._id}>\r\n                            <h4>{post.created_at.slice(0, 10)}</h4>\r\n                            <h3>{post.title}</h3>\r\n                            <p>{post.text}</p>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"sidebar\">\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserPage;","import React from 'react';\r\n// import { Link } from 'react-router-dom'\r\nimport { logout } from \"../../services/auth-services\"\r\nimport './Navbar.css'\r\n\r\nconst Navbar = (props) => {\r\n\r\n    let handleClick = () => {\r\n        logout();\r\n        props.setUser({ message: 'Not currently logged in' })\r\n    }\r\n\r\n    let scroll = () => {\r\n        window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    }\r\n\r\n    return (\r\n        <div className=\"Navbar easeInTop\">\r\n            <div className=\"nav-content\">\r\n                <h2 className=\"nav-logo\" title=\"Home\" onClick={scroll}>BreadCrumbs</h2>\r\n                <div className=\"nav-buttons\">\r\n                    <div className=\"nav-button-div\" onClick={scroll} >\r\n                        <img src=\"./home.png\" alt=\"home\" title=\"Scroll home\" className=\"home-icon\" />\r\n                    </div>\r\n                    {/* <div className=\"nav-button-icon\"> */}\r\n                    {/* <img src=\"./user.png\" alt=\"user profile\" title=\"Profile\" className=\"profile-icon\" /> */}\r\n                    {/* </div> */}\r\n                    <div className=\"nav-button-div\" onClick={handleClick} >\r\n                        <img src=\"./logout.png\" alt=\"logout\" className=\"logout-icon\" title=\"Logout\" />\r\n                    </div>\r\n                    <div className=\"nav-button-div\">\r\n                        <img src=\"./donut.png\" alt=\"new post\" className=\"new-crumb\" title=\"New Post\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Navbar","import React, { useState } from 'react';\nimport { Route } from 'react-router-dom'\nimport './App.css';\n\nimport Homepage from './components/Homepage/Homepage';\nimport UserPage from './components/UserPage/UserPage'\nimport Navbar from './components/Navbar/Navbar'\n\nfunction App(props) {\n\n  const [user, setUser] = useState(props.user)\n  console.log(\"The current user: \", user)\n\n  return (\n    <div className=\"App\">\n      {user.message ? (\n        <Route path='/' render={props => <Homepage {...props} setUser={setUser} />} />\n      ) : (\n          <div className=\"user-app\">\n            <Route path='/' render={props => <Navbar {...props} user={user} setUser={setUser} />} />\n            <Route path='/' render={props => <UserPage {...props} user={user} setUser={setUser} />} />\n          </div>\n        )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios'\n\n// axios.get(\"/api/auth/loggedin\").then(response => {\naxios.get(`${process.env.REACT_APP_API_URL}/api/auth/loggedin`).then(response => {\n  const user = response.data;\n  console.log(\"The current user state: \", response.data)\n\n  ReactDOM.render(\n    <BrowserRouter>\n      <App user={user} />\n    </BrowserRouter>,\n    document.getElementById('root')\n  );\n})\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}